/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
}

export interface NexusGenObjects {
  Event: { // root type
    address: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    date: string; // String!
    description: string; // String!
    id: string; // ID!
    image?: string | null; // String
    name: string; // String!
    performers: string[]; // [String!]!
    slug: string; // String!
    time: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // String!
    venue: string; // String!
  }
  Mutation: {};
  Pagination: { // root type
    currentPage: number; // Int!
    from: number; // Int!
    perPage: number; // Int!
    to: number; // Int!
    total: number; // Int!
    totalPages: number; // Int!
  }
  PaginationEvents: { // root type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    pagination: NexusGenRootTypes['Pagination']; // Pagination!
  }
  Query: {};
  User: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Event: { // field return type
    address: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    date: string; // String!
    description: string; // String!
    id: string; // ID!
    image: string | null; // String
    name: string; // String!
    performers: string[]; // [String!]!
    slug: string; // String!
    time: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    venue: string; // String!
  }
  Mutation: { // field return type
    createEvent: NexusGenRootTypes['Event']; // Event!
    deleteEvent: NexusGenRootTypes['Event']; // Event!
    updateEvent: NexusGenRootTypes['Event']; // Event!
  }
  Pagination: { // field return type
    currentPage: number; // Int!
    from: number; // Int!
    perPage: number; // Int!
    to: number; // Int!
    total: number; // Int!
    totalPages: number; // Int!
  }
  PaginationEvents: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    pagination: NexusGenRootTypes['Pagination']; // Pagination!
  }
  Query: { // field return type
    getAllEvents: NexusGenRootTypes['Event'][]; // [Event!]!
    getEventById: NexusGenRootTypes['Event']; // Event!
    getEventBySlug: NexusGenRootTypes['Event']; // Event!
    getEventsByKeyword: NexusGenRootTypes['Event'][]; // [Event!]!
    getLimitedEvents: NexusGenRootTypes['Event'][]; // [Event!]!
    getPaginatedEvents: NexusGenRootTypes['PaginationEvents']; // PaginationEvents!
    getUserEvents: NexusGenRootTypes['Event'][]; // [Event!]!
  }
  User: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenFieldTypeNames {
  Event: { // field return type name
    address: 'String'
    createdAt: 'Date'
    date: 'String'
    description: 'String'
    id: 'ID'
    image: 'String'
    name: 'String'
    performers: 'String'
    slug: 'String'
    time: 'String'
    updatedAt: 'Date'
    user: 'User'
    userId: 'String'
    venue: 'String'
  }
  Mutation: { // field return type name
    createEvent: 'Event'
    deleteEvent: 'Event'
    updateEvent: 'Event'
  }
  Pagination: { // field return type name
    currentPage: 'Int'
    from: 'Int'
    perPage: 'Int'
    to: 'Int'
    total: 'Int'
    totalPages: 'Int'
  }
  PaginationEvents: { // field return type name
    events: 'Event'
    pagination: 'Pagination'
  }
  Query: { // field return type name
    getAllEvents: 'Event'
    getEventById: 'Event'
    getEventBySlug: 'Event'
    getEventsByKeyword: 'Event'
    getLimitedEvents: 'Event'
    getPaginatedEvents: 'PaginationEvents'
    getUserEvents: 'Event'
  }
  User: { // field return type name
    createdAt: 'Date'
    email: 'String'
    events: 'Event'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    updatedAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createEvent: { // args
      address: string; // String!
      date: string; // String!
      description: string; // String!
      name: string; // String!
      performer: string; // String!
      time: string; // String!
      venue: string; // String!
    }
    deleteEvent: { // args
      slug: string; // String!
    }
    updateEvent: { // args
      address?: string | null; // String
      date?: string | null; // String
      description?: string | null; // String
      id: string; // String!
      image?: string | null; // String
      name?: string | null; // String
      performer?: string | null; // String
      time?: string | null; // String
      venue?: string | null; // String
    }
  }
  Query: {
    getEventById: { // args
      id: string; // String!
    }
    getEventBySlug: { // args
      slug: string; // String!
    }
    getEventsByKeyword: { // args
      keyword: string; // String!
    }
    getLimitedEvents: { // args
      take: number; // Int!
    }
    getPaginatedEvents: { // args
      page: number | null; // Int
      take: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}